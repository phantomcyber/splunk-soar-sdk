import typing
from typing import Any, Optional

import phantom.app as phantom
from phantom.base_connector import BaseConnector

from soar_sdk.types import MetaDescribed

if typing.TYPE_CHECKING:
    from .app import App


class AppConnector(BaseConnector):
    """
    The connector mainly generated by the App Wizard.
    It is extended to properly work with handlers provided
    by the app.

    Serves as the layer for exposing public BaseConnector API
    interface, so that App is no longer calling phantom library directly.

    In the future it should be replaced by another class accessing SOAR API.
    """

    def __init__(self, app: "App"):

        # Call the BaseConnectors init first
        super().__init__()

        self.app = app

        self._state: dict = {}

        # Handlers defined with the app decorator
        self._actions: dict[str, MetaDescribed] = {}

    @classmethod
    def get_soar_base_url(cls) -> str:
        return cls._get_phantom_base_url()

    def set_csrf_info(self, token: str, referer: str) -> None:
        """Public method for setting the CSRF token in connector."""
        self._set_csrf_info(token, referer)

    def handle(
        self,
        in_json: str,
        handle: Optional[Any],
    ) -> str:
        """Public method for handling the input data with the selected handler"""
        return self._handle_action(in_json, handle)

    def handle_action(self, param):
        # Get the action that we are supposed to execute for this App Run
        action_id = self.get_action_identifier()

        self.debug_print("action_id", self.get_action_identifier())

        if action_id in self.app.get_actions():
            handler: MetaDescribed = self.app.get_action(action_id)
            return handler(param)

        return phantom.APP_ERROR

    def initialize(self):
        # Load the state in initialize, use it to store data
        # that needs to be accessed across actions
        self._state = self.load_state() or {}

        # get the asset config
        # config = self.get_config()
        """
        # Access values in asset config by the name

        # Required values can be accessed directly
        required_config_name = config['required_config_name']

        # Optional values should use the .get() function
        optional_config_name = config.get('optional_config_name')
        """

        return phantom.APP_SUCCESS

    def finalize(self):
        self.save_state(self._state)
        return phantom.APP_SUCCESS
